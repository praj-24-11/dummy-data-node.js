name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: dummy-api
  ECS_CLUSTER: dummy-data-api-cluster
  ECS_SERVICE: dummy-data-api-service
  ECS_TASK_FAMILY: dummy-data-api-task
  CONTAINER_NAME: dummy-api-container

jobs:
  terraform:
    name: Terraform Init & Apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init with Remote Backend
        run: |
          cd Terraform
          terraform init \
            -backend-config="bucket=testbucket240612932137" \
            -backend-config="key=terraform/state/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=terraform-locks" \
            -backend-config="encrypt=true" \
            -backend-config="acl=bucket-owner-full-control"

      - name: Terraform Validate
        run: |
          cd Terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd Terraform
          terraform plan -out=tfplan -lock=false

#      - name: Terraform Apply
#       run: |
#         cd Terraform
#         terraform apply -auto-approve tfplan

  lint-and-sast:
    name: Linting & Security Checks
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Run Linting
        run: npm run lint -- --fix

      - name: Run Static Code Analysis
        run: npm run test

      - name: Run SAST (Security Scan)
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/default"
      
      - name: Continue on Error
        run: echo "Continuing with the pipeline despite lint/security issues."
        continue-on-error: true
  

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-sast
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to AWS ECR
        run: |
          aws configure set AWS_ACCESS_KEY_ID_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker Image
        run: docker build -t $ECR_REPOSITORY .

      - name: Tag & Push Image
        run: |
          docker tag $ECR_REPOSITORY:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy to ECS (Blue-Green)
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to AWS
        run: |
          aws configure set AWS_ACCESS_KEY_ID_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

      - name: Update ECS Task Definition
        run: |
          sed -i "s|123456789.dkr.ecr.us-east-1.amazonaws.com/dummy-api:latest|${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest|g" terraform/modules/ecs/task-def.json
          TASK_REVISION=$(aws ecs register-task-definition --cli-input-json file://terraform/modules/ecs/task-def.json | jq -r '.taskDefinition.taskDefinitionArn')
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_REVISION
